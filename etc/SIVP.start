// -------------------------------------------------------------------------
// SIVP - Scilab Image Processing toolbox
// Copyright (C) 2005-2010  Shiqi Yu
// Copyright (C) 2012 - DIGITEO - Allan CORNET
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
// -------------------------------------------------------------------------
//
function sivplib = startModule()

  TOOLBOX_NAME  = "SIVP";
  TOOLBOX_TITLE = "SIVP - Scilab Image and Video Processing Toolbox";

  mprintf("Start " + TOOLBOX_TITLE + "\n");

  if isdef("sivplib") then
    warning(TOOLBOX_NAME + " library is already loaded");
    return;
  end

  etc_tlbx  = get_absolute_file_path("SIVP.start");
  etc_tlbx  = getshortpathname(etc_tlbx);
  root_tlbx = strncpy( etc_tlbx, length(etc_tlbx)-length("\etc\") );

  //Load  functions library
  // =============================================================================
  mprintf("\tLoad macros\n");
  pathmacros = pathconvert( root_tlbx ) + "macros" + filesep();
  sivplib = lib(pathmacros);

  verboseMode = ilib_verbose();
  ilib_verbose(0);

  // load dependencies
  // =============================================================================
  // load dependencies on OpenCV 3.2.1
  if getos() == 'Windows' then
     mprintf("\tLoad dependencies\n");
    if win64() then
      opencvDllPath = root_tlbx + '\thirdparty\opencv\windows\x64\bin\';
      tbbDllPath = root_tlbx + '\thirdparty\opencv\windows\common\tbb\intel64\';
    else
      opencvDllPath = root_tlbx + '\thirdparty\opencv\windows\x86\bin\';
      tbbDllPath = root_tlbx + '\thirdparty\opencv\windows\common\tbb\ia32\';
    end

    link(tbbDllPath + 'tbb' + getdynlibext());
    link(opencvDllPath + 'opencv_core231' + getdynlibext());
    link(opencvDllPath + 'opencv_highgui231' + getdynlibext());
    link(opencvDllPath + 'opencv_imgproc231' + getdynlibext());
    link(opencvDllPath + 'opencv_flann231' + getdynlibext());
    link(opencvDllPath + 'opencv_features2d231' + getdynlibext());
    link(opencvDllPath + 'opencv_calib3d231' + getdynlibext());
    link(opencvDllPath + 'opencv_objdetect231' + getdynlibext());
    link(opencvDllPath + 'opencv_video231' + getdynlibext());
  else
    if execstr('link(''libopencv_core'' + getdynlibext())', 'errcatch') == 0 then
      link('libopencv_highgui' + getdynlibext());
      link('libopencv_imgproc' + getdynlibext());
      link('libopencv_flann' + getdynlibext());
      link('libopencv_features2d' + getdynlibext());
      link('libopencv_calib3d' + getdynlibext());
      link('libopencv_objdetect' + getdynlibext());
      ink('libopencv_video' + getdynlibext());
    else
      [a, b] = getversion();
      is_x64 = or(b == 'x64');
      if (is_x64) then
        opencvDynLibPath = fullpath(root_tlbx + '/thirdparty/opencv/" + getos() + "/x64/bin/");
      else
        opencvDynLibPath = fullpath(root_tlbx + '/thirdparty/opencv/" + getos() + "/x86/bin/");
      end
      if execstr('link(opencvDynLibPath + ''libopencv_core'' + getdynlibext())', 'errcatch') == 0 then
        link(opencvDynLibPath + 'libopencv_highgui' + getdynlibext());
        link(opencvDynLibPath + 'libopencv_imgproc' + getdynlibext());
        link(opencvDynLibPath + 'libopencv_flann' + getdynlibext());
        link(opencvDynLibPath + 'libopencv_features2d' + getdynlibext());
        link(opencvDynLibPath + 'libopencv_calib3d' + getdynlibext());
        link(opencvDynLibPath + 'libopencv_objdetect' + getdynlibext());
        link(opencvDynLibPath + 'libopencv_video' + getdynlibext());
      else
        warning("Can not load dependencies (opencv 2.3.1 or more required).");
        sivplib = [];
        return;
      end
    end
  end

  // load gateways
  // =============================================================================
  mprintf("\tLoad gateways\n");
  exec(pathconvert(root_tlbx + "/sci_gateway/loader_gateway.sce", %f));

  ilib_verbose(verboseMode);

  // Load and add help chapter
  // =============================================================================
  if or(getscilabmode() == ["NW";"STD"]) then
    mprintf("\tLoad help\n");
    path_addchapter = pathconvert(root_tlbx+"/jar");
    if ( isdir(path_addchapter) <> [] ) then
      add_help_chapter(TOOLBOX_TITLE, path_addchapter, %F);
    end
  end

  // Load demos
  // =============================================================================
  if or(getscilabmode() == ["NW";"STD"]) then
    mprintf("\tLoad demos\n");
    pathdemos = pathconvert(root_tlbx+"/demos/sivp.dem.gateway.sce",%F,%T);
    add_demo("SIVP",pathdemos);
  end

  sivp_init(root_tlbx);

endfunction
// =============================================================================
sivplib = startModule();
clear startModule; // remove startModule on stack
// =============================================================================

