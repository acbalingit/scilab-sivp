<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "mansivp.dtd">
<MAN>
<LANGUAGE>eng</LANGUAGE>
<TITLE>edge</TITLE>
<TYPE>SIVP Toolbox</TYPE>
<DATE>August, 2006</DATE>
<SHORT_DESCRIPTION name="edge">Find edges in a single channel image.</SHORT_DESCRIPTION>
<CALLING_SEQUENCE>
   <CALLING_SEQUENCE_ITEM>E = edge(im, method)</CALLING_SEQUENCE_ITEM>
   <CALLING_SEQUENCE_ITEM>E = edge(im, method, thresh)</CALLING_SEQUENCE_ITEM>
   <CALLING_SEQUENCE_ITEM>E = edge(im, method, thresh, direction)</CALLING_SEQUENCE_ITEM>
   <CALLING_SEQUENCE_ITEM>E = edge(im, method, thresh, sigma)</CALLING_SEQUENCE_ITEM>
   <CALLING_SEQUENCE_ITEM>[E, thresh] = edge(im, method, ...)</CALLING_SEQUENCE_ITEM>
</CALLING_SEQUENCE>
<PARAM>
<PARAM_INDENT>
   <PARAM_ITEM>
     <PARAM_NAME>im</PARAM_NAME>
     <PARAM_DESCRIPTION>
       Input image which must be a single channel image.
     </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
     <PARAM_NAME>method</PARAM_NAME>
     <PARAM_DESCRIPTION>
       may be &apos;sobel&apos;(default), &apos;prewitt&apos;, &apos;log&apos;, &apos;fftderiv&apos; or &apos;canny&apos;. Other methods will appear in the future.
     </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
     <PARAM_NAME>thresh</PARAM_NAME>
     <PARAM_DESCRIPTION>
sets the threshold level, from 0 to 1. Defaults to 0.2. If negative, then the output image, <TT>E</TT>, will have the un-thresholded gradient image.
     </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
     <PARAM_NAME>direction</PARAM_NAME>
     <PARAM_DESCRIPTION>
       may be &apos;horizontal&apos;, &apos;vertical&apos; or &apos;both&apos;(default). This determines the direction to compute the image gradient.
     </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
     <PARAM_NAME>sigma</PARAM_NAME>
     <PARAM_DESCRIPTION>
        Controls the ammount of high-frequency attenuation in some
       methods (only the &apos;fftderiv&apos; method uses this
       parameter). This can be used to obtain different levels of
       detail and to filter out high-frequency noise. 
     </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
     <PARAM_NAME>E</PARAM_NAME>
     <PARAM_DESCRIPTION>
       edge image which is boolean matrix and has the same size as <TT>im</TT>. 
       If <TT>thresh&lt;0</TT>, <TT>E</TT> is a double un-thresholded image.
     </PARAM_DESCRIPTION> 
   </PARAM_ITEM>
</PARAM_INDENT>
</PARAM>

<DESCRIPTION>
  <P>
  The function edge performs edge detection on a grayscale intensity image. 
The user may set the method, the threshold level, the direction of the edge detection, etc. </P>
   <DESCRIPTION_INDENT>
   <DESCRIPTION_ITEM label="E=edge(im, 'sobel', thresh, direction)">
 Detects edges in <TT>im</TT>, using the sobel gradient estimator.
   </DESCRIPTION_ITEM>
   <DESCRIPTION_ITEM label="E=edge(im, 'prewitt', thresh, direction)">
 Detects edges in <TT>im</TT>, using the prewitt gradient estimator.
   </DESCRIPTION_ITEM>
   <DESCRIPTION_ITEM label="E=edge(im, 'log', thresh, sigma)">
 Detects edges in <TT>im</TT>, using the the Laplacian of Gaussian method. 
<TT>sigma</TT> is the standard deviation of the LoG filter 
and the size of the LoG filter is nxn, where n = ceil(sigma*3)*2+1.
The default value for <TT>sigma</TT> is 2.
   </DESCRIPTION_ITEM>
   <DESCRIPTION_ITEM label="E=edge(im, 'fftderiv', thresh, direction, sigma)">
 Detects edges in <TT>im</TT>, using the FFT gradient method, default sigma 1.0 
   </DESCRIPTION_ITEM>
   <DESCRIPTION_ITEM label="E=edge(im, 'canny', thresh, sigma)">
 Detects edges in <TT>im</TT>, using Canny method. 
<TT>thresh</TT> is a two-element vector, in which the fist element is the low threshold 
and the seond one is the high threshold. If <TT>thresh</TT> is a scalar, 
the low threshold is <TT>0.4*thresh</TT> and the high one is <TT>thresh</TT>.
Besides, <TT>thresh</TT> can not be negative scalar.
<TT>sigma</TT> is the Aperture parameter for Sobel operator, which must be 1, 3, 5 or 7.
default thresh 0.2; default sigma 3.
   </DESCRIPTION_ITEM>
   </DESCRIPTION_INDENT>

<P>
  Supported classes: INT8, UINT8, INT16, UINT16, INT32, DOUBLE.
</P>
</DESCRIPTION>

<!-- ================================= -->
<EXAMPLE><![CDATA[

    im = imread('lena.png');
    im = rgb2gray(im);
    E = edge(im, 'sobel');
    imshow(E);

    E = edge(im, 'canny', [0.06, 0.2]);
    imshow(E);

    E = edge(im, 'sobel', -1);
    imshow(mat2gray(E));

]]></EXAMPLE>

<!-- ================================= -->
<AUTHORS>
   <AUTHORS_ITEM name="Shiqi"> Shiqi Yu &lt;shiqi.yu[at]gmail.com&gt; </AUTHORS_ITEM>
   <AUTHORS_ITEM name="Ricardo"> Ricardo Fabbri &lt;ricardofabbri[at]users.sf.net&gt; </AUTHORS_ITEM>

</AUTHORS>

<!-- ================================= -->
<BIBLIO>
   <P>
"Shape Analysis and Classification", L. da
F. Costa and R. M. Cesar Jr., CRC Press, section 3.3.
   </P>
</BIBLIO>
<!-- ================================= -->

<SECTION label="Availability">
The latest version of SIVP can be found at
<P><A href="http://sivp.sourceforge.net">http://sivp.sourceforge.net</A></P>
</SECTION>
<!-- ================================= -->
   <SEE_ALSO>
      <SEE_ALSO_ITEM><LINK>fspecial</LINK> </SEE_ALSO_ITEM>
      <SEE_ALSO_ITEM><LINK>imfilter</LINK> </SEE_ALSO_ITEM>
      <SEE_ALSO_ITEM><LINK>filter2</LINK> </SEE_ALSO_ITEM>
   </SEE_ALSO>
</MAN>
