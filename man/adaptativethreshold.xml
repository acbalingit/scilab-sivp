<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE MAN SYSTEM "mansivp.dtd">
<MAN>
<LANGUAGE>eng</LANGUAGE>
<TITLE>adaptativethreshold</TITLE>
<TYPE>SIVP Toolbox</TYPE>
<DATE>July, 2005</DATE>
<SHORT_DESCRIPTION name="threshold">Applies adaptive threshold to array</SHORT_DESCRIPTION>
<CALLING_SEQUENCE>
   <CALLING_SEQUENCE_ITEM>ima_out = adaptativethreshold(ima_in,param1,"methode","type",param2,param3)</CALLING_SEQUENCE_ITEM>
</CALLING_SEQUENCE>
<PARAM>
<PARAM_INDENT>
   <PARAM_ITEM>
   <PARAM_NAME>ima_in</PARAM_NAME>
   <PARAM_DESCRIPTION>
   Input matrice.
   </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
   <PARAM_NAME>ima_out</PARAM_NAME>
   <PARAM_DESCRIPTION>
   Output matrice. Image to store the edges found by the function.
   </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
   <PARAM_NAME>methode</PARAM_NAME>
   <PARAM_DESCRIPTION>
   methode of thresehold :
   
   Adaptive thresholding algorithm to use: ADAPTIVE_THRESH_MEAN_C or ADAPTIVE_THRESH_GAUSSIAN_C.
   
   </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
   <PARAM_NAME>type</PARAM_NAME>
   <PARAM_DESCRIPTION>
   thresholding type; must be one of : 
	THRESH_BINARY, 
	THRESH_BINARY_INV,
   </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
   <PARAM_NAME>Param1</PARAM_NAME>
   <PARAM_DESCRIPTION>
   Maximum value that is used with THRESH_BINARY and THRESH_BINARY_INV.
   </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
   <PARAM_NAME>param2</PARAM_NAME>
   <PARAM_DESCRIPTION>
   The size of a pixel neighborhood that is used to calculate a threshold value for the pixel: 3, 5, 7, ...
   </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   <PARAM_ITEM>
   <PARAM_NAME>param3</PARAM_NAME>
   <PARAM_DESCRIPTION>
The method-dependent parameter. For the methods ADAPTIVE_THRESH_MEAN_C and ADAPTIVE_THRESH_GAUSSIAN_C it is a constant subtracted from mean or weighted mean, though it may be negative.
   </PARAM_DESCRIPTION>
   </PARAM_ITEM>
   </PARAM_INDENT>
</PARAM>
<DESCRIPTION>
<P>
   <TT>adaptativethreshold</TT> The function cvAdaptiveThreshold transforms grayscale image to binary image according to the formula :

</P>
<P>
thresholdType=THRESH_BINARY:
dst(x,y) = maxValue, if src(x,y)>T(x,y)
           0, otherwise
</P>
<P>
thresholdType=THRESH_BINARY_INV:
dst(x,y) = 0, if src(x,y)>T(x,y)
           maxValue, otherwise
</P>
<P>
where TI is a threshold calculated individually for each pixel.

For the method ADAPTIVE_THRESH_MEAN_C it is a mean of blockSize × blockSize pixel neighborhood, subtracted by param3.

For the method ADAPTIVE_THRESH_GAUSSIAN_C it is a weighted sum (gaussian) of blockSize × blockSize pixel neighborhood, subtracted by param3.

</P>

</DESCRIPTION>
<EXAMPLE><![CDATA[

//upgrade the size of the memory
stacksize(10000000); 

//load the picture
A=imread('/home/vincent/software/sivp/images/maison.jpg');

B=convert(A,'BGR2GRAY');

//call the rect SIVP function
//C=adaptativethreshold(B,200,'ADAPTIVE_THRESH_MEAN_C','THRESH_BINARY',3,1);
//C=adaptativethreshold(B,200,'ADAPTIVE_THRESH_MEAN_C','THRESH_BINARY',5,-1);
//C=adaptativethreshold(B,200,'ADAPTIVE_THRESH_GAUSSIAN_C','THRESH_BINARY_INV',7,2);
C=adaptativethreshold(B,200,'ADAPTIVE_THRESH_GAUSSIAN_C','THRESH_BINARY_INV',9,-2);

//conversion
C=double(C)/255;

//try to display the result
xbasc();
imshow(C);
imwrite(C,"/home/vincent/Desktop/image/adapth.png")

]]></EXAMPLE>
<!-- ================================= -->

<AUTHORS>
   <AUTHORS_ITEM name="ETIENNE"> ETIENNE Vincent &lt;vincent.etienne (AT) gmail DOT com &gt; </AUTHORS_ITEM>
</AUTHORS>
<!-- ================================= -->
<SECTION label="Bugs and Shortcomings">
<P>
</P>
</SECTION>
<!-- ================================= -->
<SECTION label="Availability">
The latest version of SIVP can be found at
<P><A href="http://sivp.sourceforge.net">http://sivp.sourceforge.net</A></P>
</SECTION>
<!-- ================================= -->
   <SEE_ALSO>
      <SEE_ALSO_ITEM> <LINK>threshold</LINK> </SEE_ALSO_ITEM>
      <SEE_ALSO_ITEM> <LINK></LINK> </SEE_ALSO_ITEM>
   </SEE_ALSO>
</MAN>
